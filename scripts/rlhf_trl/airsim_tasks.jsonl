{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，上升2米，然后前进9米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, -2, 1.0).join()\nclient.moveByVelocityAsync(5.0, 0, 0, 1.8).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，旋转向左90度，然后向后飞行18米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(-90).join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 3.6).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，前进5米，然后悬停5秒，然后向左飞行13米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(5.0, 0, 0, 1.0).join()\nclient.hoverAsync().join()\ntime.sleep(5)  # 悬停5秒\nclient.moveByVelocityAsync(0, -5.0, 0, 2.6).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，上升3米，然后向左飞行17米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, -2, 1.5).join()\nclient.moveByVelocityAsync(0, -5.0, 0, 3.4).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，前进18米，然后转向向左45度，然后拍照，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(5.0, 0, 0, 3.6).join()\nclient.rotateToYawAsync(-45).join()\nresponses = client.simGetImages([airsim.ImageRequest(0, airsim.ImageType.Scene, False, False)])\n# 在此处可以对获取的图像进行处理或保存\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，旋转向右45度，然后旋转向左45度，然后向右飞行14米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(45).join()\nclient.rotateToYawAsync(-45).join()\nclient.moveByVelocityAsync(0, 5.0, 0, 2.8).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，悬停4秒，然后左移18米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.hoverAsync().join()\ntime.sleep(4)  # 悬停4秒\nclient.moveByVelocityAsync(0, -5.0, 0, 3.6).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，旋转向右45度，然后停留在空中3秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(45).join()\nclient.hoverAsync().join()\ntime.sleep(3)  # 悬停3秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，爬升7米，然后向右飞行12米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, -2, 3.5).join()\nclient.moveByVelocityAsync(0, 5.0, 0, 2.4).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，向后飞行5米，然后向左飞行6米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 1.0).join()\nclient.moveByVelocityAsync(0, -5.0, 0, 1.2).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，拍照，然后转向向左90度，然后向左飞行18米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nresponses = client.simGetImages([airsim.ImageRequest(0, airsim.ImageType.Scene, False, False)])\n# 在此处可以对获取的图像进行处理或保存\nclient.rotateToYawAsync(-90).join()\nclient.moveByVelocityAsync(0, -5.0, 0, 3.6).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，向右飞行13米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 5.0, 0, 2.6).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，转向向左45度，然后右移7米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(-45).join()\nclient.moveByVelocityAsync(0, 5.0, 0, 1.4).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，右移20米，然后向左飞行13米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 5.0, 0, 4.0).join()\nclient.moveByVelocityAsync(0, -5.0, 0, 2.6).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，旋转向左90度，然后停留在空中3秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(-90).join()\nclient.hoverAsync().join()\ntime.sleep(3)  # 悬停3秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，右移6米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 5.0, 0, 1.2).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，向左飞行11米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, -5.0, 0, 2.2).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，后退15米，然后左移6米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 3.0).join()\nclient.moveByVelocityAsync(0, -5.0, 0, 1.2).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，转向向左45度，然后向前飞行14米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(-45).join()\nclient.moveByVelocityAsync(5.0, 0, 0, 2.8).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，拍照，然后停留在空中4秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nresponses = client.simGetImages([airsim.ImageRequest(0, airsim.ImageType.Scene, False, False)])\n# 在此处可以对获取的图像进行处理或保存\nclient.hoverAsync().join()\ntime.sleep(4)  # 悬停4秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，前进16米，然后爬升4米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(5.0, 0, 0, 3.2).join()\nclient.moveByVelocityAsync(0, 0, -2, 2.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，停留在空中5秒，然后悬停2秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.hoverAsync().join()\ntime.sleep(5)  # 悬停5秒\nclient.hoverAsync().join()\ntime.sleep(2)  # 悬停2秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，捕获图像，然后旋转向右45度，然后旋转向左90度，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nresponses = client.simGetImages([airsim.ImageRequest(0, airsim.ImageType.Scene, False, False)])\n# 在此处可以对获取的图像进行处理或保存\nclient.rotateToYawAsync(45).join()\nclient.rotateToYawAsync(-90).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，向左飞行15米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, -5.0, 0, 3.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，下降2米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, 2, 1.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，向后飞行12米，然后上升4米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 2.4).join()\nclient.moveByVelocityAsync(0, 0, -2, 2.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，捕获图像，然后转向向左45度，然后爬升4米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nresponses = client.simGetImages([airsim.ImageRequest(0, airsim.ImageType.Scene, False, False)])\n# 在此处可以对获取的图像进行处理或保存\nclient.rotateToYawAsync(-45).join()\nclient.moveByVelocityAsync(0, 0, -2, 2.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，下降2米，然后降低高度7米，然后捕获图像，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, 2, 1.0).join()\nclient.moveByVelocityAsync(0, 0, 2, 3.5).join()\nresponses = client.simGetImages([airsim.ImageRequest(0, airsim.ImageType.Scene, False, False)])\n# 在此处可以对获取的图像进行处理或保存\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，后退17米，然后降低高度2米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 3.4).join()\nclient.moveByVelocityAsync(0, 0, 2, 1.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，上升3米，然后向后飞行14米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, -2, 1.5).join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 2.8).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，转向向右90度，然后降低高度7米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(90).join()\nclient.moveByVelocityAsync(0, 0, 2, 3.5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，左移6米，然后后退17米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, -5.0, 0, 1.2).join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 3.4).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，爬升4米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, -2, 2.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，停留在空中4秒，然后停留在空中2秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.hoverAsync().join()\ntime.sleep(4)  # 悬停4秒\nclient.hoverAsync().join()\ntime.sleep(2)  # 悬停2秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，捕获图像，然后停留在空中5秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nresponses = client.simGetImages([airsim.ImageRequest(0, airsim.ImageType.Scene, False, False)])\n# 在此处可以对获取的图像进行处理或保存\nclient.hoverAsync().join()\ntime.sleep(5)  # 悬停5秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，右移5米，然后降低高度2米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 5.0, 0, 1.0).join()\nclient.moveByVelocityAsync(0, 0, 2, 1.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，转向向右180度，然后转向向右180度，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(180).join()\nclient.rotateToYawAsync(180).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，后退14米，然后前进6米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 2.8).join()\nclient.moveByVelocityAsync(5.0, 0, 0, 1.2).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，停留在空中5秒，然后旋转向右180度，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.hoverAsync().join()\ntime.sleep(5)  # 悬停5秒\nclient.rotateToYawAsync(180).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，旋转向右90度，然后停留在空中5秒，然后悬停3秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(90).join()\nclient.hoverAsync().join()\ntime.sleep(5)  # 悬停5秒\nclient.hoverAsync().join()\ntime.sleep(3)  # 悬停3秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，停留在空中4秒，然后降低高度4米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.hoverAsync().join()\ntime.sleep(4)  # 悬停4秒\nclient.moveByVelocityAsync(0, 0, 2, 2.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，拍照，然后拍照，然后拍照，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nresponses = client.simGetImages([airsim.ImageRequest(0, airsim.ImageType.Scene, False, False)])\n# 在此处可以对获取的图像进行处理或保存\nresponses = client.simGetImages([airsim.ImageRequest(0, airsim.ImageType.Scene, False, False)])\n# 在此处可以对获取的图像进行处理或保存\nresponses = client.simGetImages([airsim.ImageRequest(0, airsim.ImageType.Scene, False, False)])\n# 在此处可以对获取的图像进行处理或保存\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，左移17米，然后右移14米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, -5.0, 0, 3.4).join()\nclient.moveByVelocityAsync(0, 5.0, 0, 2.8).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，停留在空中3秒，然后悬停5秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.hoverAsync().join()\ntime.sleep(3)  # 悬停3秒\nclient.hoverAsync().join()\ntime.sleep(5)  # 悬停5秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，降低高度10米，然后降低高度3米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, 2, 5.0).join()\nclient.moveByVelocityAsync(0, 0, 2, 1.5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，降低高度9米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, 2, 4.5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，下降10米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, 2, 5.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，前进14米，然后停留在空中5秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(5.0, 0, 0, 2.8).join()\nclient.hoverAsync().join()\ntime.sleep(5)  # 悬停5秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，停留在空中3秒，然后停留在空中4秒，然后爬升10米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.hoverAsync().join()\ntime.sleep(3)  # 悬停3秒\nclient.hoverAsync().join()\ntime.sleep(4)  # 悬停4秒\nclient.moveByVelocityAsync(0, 0, -2, 5.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，停留在空中2秒，然后后退20米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.hoverAsync().join()\ntime.sleep(2)  # 悬停2秒\nclient.moveByVelocityAsync(-5.0, 0, 0, 4.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，向前飞行15米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(5.0, 0, 0, 3.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，停留在空中4秒，然后转向向右90度，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.hoverAsync().join()\ntime.sleep(4)  # 悬停4秒\nclient.rotateToYawAsync(90).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，爬升9米，然后悬停2秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, -2, 4.5).join()\nclient.hoverAsync().join()\ntime.sleep(2)  # 悬停2秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，转向向左90度，然后停留在空中5秒，然后悬停5秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(-90).join()\nclient.hoverAsync().join()\ntime.sleep(5)  # 悬停5秒\nclient.hoverAsync().join()\ntime.sleep(5)  # 悬停5秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，转向向右180度，然后降低高度10米，然后向后飞行13米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(180).join()\nclient.moveByVelocityAsync(0, 0, 2, 5.0).join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 2.6).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，向后飞行19米，然后爬升7米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 3.8).join()\nclient.moveByVelocityAsync(0, 0, -2, 3.5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，右移12米，然后左移11米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 5.0, 0, 2.4).join()\nclient.moveByVelocityAsync(0, -5.0, 0, 2.2).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，前进16米，然后左移7米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(5.0, 0, 0, 3.2).join()\nclient.moveByVelocityAsync(0, -5.0, 0, 1.4).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，捕获图像，然后拍照，然后上升4米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nresponses = client.simGetImages([airsim.ImageRequest(0, airsim.ImageType.Scene, False, False)])\n# 在此处可以对获取的图像进行处理或保存\nresponses = client.simGetImages([airsim.ImageRequest(0, airsim.ImageType.Scene, False, False)])\n# 在此处可以对获取的图像进行处理或保存\nclient.moveByVelocityAsync(0, 0, -2, 2.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，向前飞行19米，然后向前飞行7米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(5.0, 0, 0, 3.8).join()\nclient.moveByVelocityAsync(5.0, 0, 0, 1.4).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，上升9米，然后停留在空中2秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, -2, 4.5).join()\nclient.hoverAsync().join()\ntime.sleep(2)  # 悬停2秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，捕获图像，然后旋转向左45度，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nresponses = client.simGetImages([airsim.ImageRequest(0, airsim.ImageType.Scene, False, False)])\n# 在此处可以对获取的图像进行处理或保存\nclient.rotateToYawAsync(-45).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，向后飞行16米，然后向右飞行12米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 3.2).join()\nclient.moveByVelocityAsync(0, 5.0, 0, 2.4).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，捕获图像，然后向前飞行17米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nresponses = client.simGetImages([airsim.ImageRequest(0, airsim.ImageType.Scene, False, False)])\n# 在此处可以对获取的图像进行处理或保存\nclient.moveByVelocityAsync(5.0, 0, 0, 3.4).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，左移20米，然后向左飞行14米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, -5.0, 0, 4.0).join()\nclient.moveByVelocityAsync(0, -5.0, 0, 2.8).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，下降2米，然后旋转向左90度，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, 2, 1.0).join()\nclient.rotateToYawAsync(-90).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，上升5米，然后前进14米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, -2, 2.5).join()\nclient.moveByVelocityAsync(5.0, 0, 0, 2.8).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，向前飞行11米，然后下降6米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(5.0, 0, 0, 2.2).join()\nclient.moveByVelocityAsync(0, 0, 2, 3.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，降低高度10米，然后右移13米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, 2, 5.0).join()\nclient.moveByVelocityAsync(0, 5.0, 0, 2.6).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，转向向右180度，然后旋转向右180度，然后向前飞行13米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(180).join()\nclient.rotateToYawAsync(180).join()\nclient.moveByVelocityAsync(5.0, 0, 0, 2.6).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，旋转向左90度，然后下降3米，然后悬停2秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(-90).join()\nclient.moveByVelocityAsync(0, 0, 2, 1.5).join()\nclient.hoverAsync().join()\ntime.sleep(2)  # 悬停2秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，爬升8米，然后向后飞行7米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, -2, 4.0).join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 1.4).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，向后飞行10米，然后左移8米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 2.0).join()\nclient.moveByVelocityAsync(0, -5.0, 0, 1.6).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，降低高度4米，然后后退9米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, 2, 2.0).join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 1.8).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，下降8米，然后转向向右45度，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, 2, 4.0).join()\nclient.rotateToYawAsync(45).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，爬升6米，然后爬升10米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, -2, 3.0).join()\nclient.moveByVelocityAsync(0, 0, -2, 5.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，上升8米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, -2, 4.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，上升10米，然后向右飞行10米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, -2, 5.0).join()\nclient.moveByVelocityAsync(0, 5.0, 0, 2.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，爬升4米，然后左移6米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, -2, 2.0).join()\nclient.moveByVelocityAsync(0, -5.0, 0, 1.2).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，悬停5秒，然后悬停3秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.hoverAsync().join()\ntime.sleep(5)  # 悬停5秒\nclient.hoverAsync().join()\ntime.sleep(3)  # 悬停3秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，向前飞行6米，然后右移19米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(5.0, 0, 0, 1.2).join()\nclient.moveByVelocityAsync(0, 5.0, 0, 3.8).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，右移14米，然后向前飞行5米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 5.0, 0, 2.8).join()\nclient.moveByVelocityAsync(5.0, 0, 0, 1.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，下降2米，然后向右飞行10米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, 2, 1.0).join()\nclient.moveByVelocityAsync(0, 5.0, 0, 2.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，右移8米，然后向左飞行10米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 5.0, 0, 1.6).join()\nclient.moveByVelocityAsync(0, -5.0, 0, 2.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，向后飞行11米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 2.2).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，后退20米，然后下降7米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 4.0).join()\nclient.moveByVelocityAsync(0, 0, 2, 3.5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，爬升7米，然后向前飞行5米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, -2, 3.5).join()\nclient.moveByVelocityAsync(5.0, 0, 0, 1.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，向前飞行16米，然后左移20米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(5.0, 0, 0, 3.2).join()\nclient.moveByVelocityAsync(0, -5.0, 0, 4.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，停留在空中4秒，然后停留在空中3秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.hoverAsync().join()\ntime.sleep(4)  # 悬停4秒\nclient.hoverAsync().join()\ntime.sleep(3)  # 悬停3秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Complex", "description": "无人机起飞后，旋转向右45度，然后后退13米，然后悬停3秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(45).join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 2.6).join()\nclient.hoverAsync().join()\ntime.sleep(3)  # 悬停3秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，悬停2秒，然后旋转向右45度，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.hoverAsync().join()\ntime.sleep(2)  # 悬停2秒\nclient.rotateToYawAsync(45).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，后退13米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 2.6).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，转向向左90度，然后旋转向左90度，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(-90).join()\nclient.rotateToYawAsync(-90).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，降低高度3米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, 2, 1.5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，旋转向左45度，然后悬停4秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(-45).join()\nclient.hoverAsync().join()\ntime.sleep(4)  # 悬停4秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，降低高度2米，然后旋转向右45度，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, 0, 2, 1.0).join()\nclient.rotateToYawAsync(45).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，向后飞行11米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 2.2).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，左移20米，然后后退15米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(0, -5.0, 0, 4.0).join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 3.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Simple", "description": "无人机起飞后，后退15米，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveByVelocityAsync(-5.0, 0, 0, 3.0).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Composite Instruction", "difficulty": "Medium", "description": "无人机起飞后，旋转向左90度，然后悬停4秒，最后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.rotateToYawAsync(-90).join()\nclient.hoverAsync().join()\ntime.sleep(4)  # 悬停4秒\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-25, 28, -14, 5).join()\nclient.moveToPositionAsync(-4, 38, -11, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-1, -37, -9, 5).join()\nclient.moveToPositionAsync(36, -1, -9, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(46, 24, -16, 5).join()\nclient.moveToPositionAsync(46, 35, -16, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-6, -30, -9, 5).join()\nclient.moveToPositionAsync(-34, -28, -12, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问4个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(38, 25, -14, 5).join()\nclient.moveToPositionAsync(27, -23, -10, 5).join()\nclient.moveToPositionAsync(-46, 40, -11, 5).join()\nclient.moveToPositionAsync(-32, 18, -17, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(34, -45, -6, 5).join()\nclient.moveToPositionAsync(-39, -30, -7, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问4个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(17, 46, -12, 5).join()\nclient.moveToPositionAsync(48, 42, -12, 5).join()\nclient.moveToPositionAsync(-37, 8, -13, 5).join()\nclient.moveToPositionAsync(-1, 27, -5, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问5个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(26, 20, -12, 5).join()\nclient.moveToPositionAsync(43, -8, -16, 5).join()\nclient.moveToPositionAsync(-49, 30, -14, 5).join()\nclient.moveToPositionAsync(15, 15, -12, 5).join()\nclient.moveToPositionAsync(5, 5, -6, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-15, 18, -6, 5).join()\nclient.moveToPositionAsync(-28, 25, -5, 5).join()\nclient.moveToPositionAsync(-21, -28, -20, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问10个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-9, 18, -20, 5).join()\nclient.moveToPositionAsync(-3, 24, -15, 5).join()\nclient.moveToPositionAsync(-18, 27, -13, 5).join()\nclient.moveToPositionAsync(-31, 40, -12, 5).join()\nclient.moveToPositionAsync(-36, 46, -18, 5).join()\nclient.moveToPositionAsync(-38, 20, -11, 5).join()\nclient.moveToPositionAsync(29, 39, -9, 5).join()\nclient.moveToPositionAsync(32, -42, -15, 5).join()\nclient.moveToPositionAsync(41, -49, -6, 5).join()\nclient.moveToPositionAsync(-11, -45, -16, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(15, -40, -16, 5).join()\nclient.moveToPositionAsync(17, 27, -14, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(11, -11, -5, 5).join()\nclient.moveToPositionAsync(-5, -46, -17, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问6个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(19, 39, -18, 5).join()\nclient.moveToPositionAsync(-27, 33, -6, 5).join()\nclient.moveToPositionAsync(-23, -38, -7, 5).join()\nclient.moveToPositionAsync(-49, 4, -7, 5).join()\nclient.moveToPositionAsync(32, -27, -5, 5).join()\nclient.moveToPositionAsync(-29, -46, -11, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问8个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-1, -5, -9, 5).join()\nclient.moveToPositionAsync(31, -19, -15, 5).join()\nclient.moveToPositionAsync(30, -23, -15, 5).join()\nclient.moveToPositionAsync(40, -28, -13, 5).join()\nclient.moveToPositionAsync(36, -43, -20, 5).join()\nclient.moveToPositionAsync(19, -46, -13, 5).join()\nclient.moveToPositionAsync(18, 41, -12, 5).join()\nclient.moveToPositionAsync(-16, 40, -15, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问6个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(11, -2, -16, 5).join()\nclient.moveToPositionAsync(-23, -29, -7, 5).join()\nclient.moveToPositionAsync(34, 46, -14, 5).join()\nclient.moveToPositionAsync(-46, -36, -9, 5).join()\nclient.moveToPositionAsync(49, 39, -12, 5).join()\nclient.moveToPositionAsync(31, -46, -11, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问8个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-8, -6, -13, 5).join()\nclient.moveToPositionAsync(-29, 7, -16, 5).join()\nclient.moveToPositionAsync(-49, -8, -15, 5).join()\nclient.moveToPositionAsync(-37, -42, -11, 5).join()\nclient.moveToPositionAsync(-23, -39, -12, 5).join()\nclient.moveToPositionAsync(30, 15, -17, 5).join()\nclient.moveToPositionAsync(45, 12, -6, 5).join()\nclient.moveToPositionAsync(21, 50, -8, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问9个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-19, -10, -11, 5).join()\nclient.moveToPositionAsync(-32, -4, -7, 5).join()\nclient.moveToPositionAsync(-33, -14, -11, 5).join()\nclient.moveToPositionAsync(-44, -15, -19, 5).join()\nclient.moveToPositionAsync(-29, -26, -13, 5).join()\nclient.moveToPositionAsync(-1, -49, -18, 5).join()\nclient.moveToPositionAsync(-22, 13, -20, 5).join()\nclient.moveToPositionAsync(-30, 45, -18, 5).join()\nclient.moveToPositionAsync(-15, 49, -18, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问8个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-10, -10, -11, 5).join()\nclient.moveToPositionAsync(-23, -43, -11, 5).join()\nclient.moveToPositionAsync(4, -44, -11, 5).join()\nclient.moveToPositionAsync(41, 13, -9, 5).join()\nclient.moveToPositionAsync(24, 47, -7, 5).join()\nclient.moveToPositionAsync(-11, 26, -17, 5).join()\nclient.moveToPositionAsync(-19, 31, -11, 5).join()\nclient.moveToPositionAsync(-23, 45, -10, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问7个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(12, 17, -9, 5).join()\nclient.moveToPositionAsync(-4, 39, -15, 5).join()\nclient.moveToPositionAsync(-28, 40, -20, 5).join()\nclient.moveToPositionAsync(-50, -6, -5, 5).join()\nclient.moveToPositionAsync(32, -18, -11, 5).join()\nclient.moveToPositionAsync(49, -26, -13, 5).join()\nclient.moveToPositionAsync(29, 43, -9, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-23, 4, -14, 5).join()\nclient.moveToPositionAsync(10, 7, -18, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问5个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(31, -15, -6, 5).join()\nclient.moveToPositionAsync(-32, -6, -17, 5).join()\nclient.moveToPositionAsync(-11, -34, -8, 5).join()\nclient.moveToPositionAsync(-24, -12, -15, 5).join()\nclient.moveToPositionAsync(-5, -21, -5, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(45, -29, -8, 5).join()\nclient.moveToPositionAsync(16, -1, -9, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问9个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(21, 12, -14, 5).join()\nclient.moveToPositionAsync(42, 3, -5, 5).join()\nclient.moveToPositionAsync(40, -44, -11, 5).join()\nclient.moveToPositionAsync(7, -44, -13, 5).join()\nclient.moveToPositionAsync(-25, -22, -7, 5).join()\nclient.moveToPositionAsync(-37, -23, -17, 5).join()\nclient.moveToPositionAsync(-38, -14, -18, 5).join()\nclient.moveToPositionAsync(-16, 25, -5, 5).join()\nclient.moveToPositionAsync(-8, 40, -9, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(27, 24, -17, 5).join()\nclient.moveToPositionAsync(48, 40, -20, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(34, 26, -14, 5).join()\nclient.moveToPositionAsync(-21, -4, -15, 5).join()\nclient.moveToPositionAsync(-15, -2, -17, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问5个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-9, 30, -13, 5).join()\nclient.moveToPositionAsync(16, -10, -9, 5).join()\nclient.moveToPositionAsync(-47, -35, -7, 5).join()\nclient.moveToPositionAsync(-13, 35, -18, 5).join()\nclient.moveToPositionAsync(15, -49, -16, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问6个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-44, -40, -14, 5).join()\nclient.moveToPositionAsync(8, 34, -15, 5).join()\nclient.moveToPositionAsync(-35, 25, -13, 5).join()\nclient.moveToPositionAsync(-36, 19, -5, 5).join()\nclient.moveToPositionAsync(17, -39, -5, 5).join()\nclient.moveToPositionAsync(42, -36, -18, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问10个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-11, -1, -20, 5).join()\nclient.moveToPositionAsync(-23, -9, -15, 5).join()\nclient.moveToPositionAsync(-22, 12, -11, 5).join()\nclient.moveToPositionAsync(-46, 23, -5, 5).join()\nclient.moveToPositionAsync(-49, 4, -12, 5).join()\nclient.moveToPositionAsync(-8, 50, -6, 5).join()\nclient.moveToPositionAsync(6, 34, -6, 5).join()\nclient.moveToPositionAsync(12, 39, -6, 5).join()\nclient.moveToPositionAsync(19, 25, -10, 5).join()\nclient.moveToPositionAsync(9, -33, -17, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问10个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-21, 15, -8, 5).join()\nclient.moveToPositionAsync(-26, 23, -7, 5).join()\nclient.moveToPositionAsync(-35, 47, -13, 5).join()\nclient.moveToPositionAsync(6, 39, -16, 5).join()\nclient.moveToPositionAsync(46, 22, -16, 5).join()\nclient.moveToPositionAsync(35, -18, -7, 5).join()\nclient.moveToPositionAsync(43, -24, -6, 5).join()\nclient.moveToPositionAsync(24, -18, -7, 5).join()\nclient.moveToPositionAsync(11, -28, -16, 5).join()\nclient.moveToPositionAsync(-36, -2, -10, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(5, -2, -15, 5).join()\nclient.moveToPositionAsync(35, -39, -6, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(7, -43, -14, 5).join()\nclient.moveToPositionAsync(-14, 14, -8, 5).join()\nclient.moveToPositionAsync(-29, 39, -11, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问5个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(26, 25, -11, 5).join()\nclient.moveToPositionAsync(-36, 14, -5, 5).join()\nclient.moveToPositionAsync(28, -27, -19, 5).join()\nclient.moveToPositionAsync(7, -35, -19, 5).join()\nclient.moveToPositionAsync(33, -41, -11, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-39, -36, -8, 5).join()\nclient.moveToPositionAsync(38, 49, -6, 5).join()\nclient.moveToPositionAsync(-45, 26, -11, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问4个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-37, -9, -16, 5).join()\nclient.moveToPositionAsync(29, 28, -11, 5).join()\nclient.moveToPositionAsync(-28, 35, -7, 5).join()\nclient.moveToPositionAsync(-28, 27, -14, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(32, -20, -17, 5).join()\nclient.moveToPositionAsync(22, 4, -6, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-36, 45, -9, 5).join()\nclient.moveToPositionAsync(-22, 16, -9, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-6, -11, -5, 5).join()\nclient.moveToPositionAsync(27, 44, -7, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(6, 18, -20, 5).join()\nclient.moveToPositionAsync(-46, -14, -5, 5).join()\nclient.moveToPositionAsync(-26, -11, -14, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问4个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-5, 31, -14, 5).join()\nclient.moveToPositionAsync(4, 41, -13, 5).join()\nclient.moveToPositionAsync(-34, -41, -15, 5).join()\nclient.moveToPositionAsync(-37, 48, -8, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问6个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-28, -27, -18, 5).join()\nclient.moveToPositionAsync(-9, -42, -7, 5).join()\nclient.moveToPositionAsync(-6, 4, -15, 5).join()\nclient.moveToPositionAsync(13, -49, -13, 5).join()\nclient.moveToPositionAsync(-47, -9, -7, 5).join()\nclient.moveToPositionAsync(-19, -41, -20, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-8, -33, -13, 5).join()\nclient.moveToPositionAsync(12, -13, -18, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问4个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-45, -16, -12, 5).join()\nclient.moveToPositionAsync(24, 41, -18, 5).join()\nclient.moveToPositionAsync(-7, -44, -12, 5).join()\nclient.moveToPositionAsync(40, 18, -6, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-34, -45, -8, 5).join()\nclient.moveToPositionAsync(10, 4, -12, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-50, -2, -12, 5).join()\nclient.moveToPositionAsync(46, -42, -18, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问4个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(18, -49, -10, 5).join()\nclient.moveToPositionAsync(-8, -5, -9, 5).join()\nclient.moveToPositionAsync(5, -11, -18, 5).join()\nclient.moveToPositionAsync(-5, 48, -18, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(30, -3, -13, 5).join()\nclient.moveToPositionAsync(14, -4, -11, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问6个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-20, -7, -19, 5).join()\nclient.moveToPositionAsync(-30, -2, -9, 5).join()\nclient.moveToPositionAsync(31, -14, -18, 5).join()\nclient.moveToPositionAsync(-38, 15, -16, 5).join()\nclient.moveToPositionAsync(46, 30, -5, 5).join()\nclient.moveToPositionAsync(22, -42, -5, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问6个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-26, -8, -15, 5).join()\nclient.moveToPositionAsync(46, 22, -19, 5).join()\nclient.moveToPositionAsync(-14, -31, -6, 5).join()\nclient.moveToPositionAsync(-42, -16, -20, 5).join()\nclient.moveToPositionAsync(26, 41, -12, 5).join()\nclient.moveToPositionAsync(-42, -37, -15, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-32, 49, -10, 5).join()\nclient.moveToPositionAsync(-6, -50, -15, 5).join()\nclient.moveToPositionAsync(-1, 16, -18, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-20, -27, -13, 5).join()\nclient.moveToPositionAsync(33, 0, -17, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问7个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(11, -6, -20, 5).join()\nclient.moveToPositionAsync(13, -42, -12, 5).join()\nclient.moveToPositionAsync(42, -49, -5, 5).join()\nclient.moveToPositionAsync(47, -22, -9, 5).join()\nclient.moveToPositionAsync(49, -7, -16, 5).join()\nclient.moveToPositionAsync(-13, 37, -17, 5).join()\nclient.moveToPositionAsync(-47, 27, -15, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(8, 33, -19, 5).join()\nclient.moveToPositionAsync(-17, 14, -5, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问4个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-4, -38, -19, 5).join()\nclient.moveToPositionAsync(-40, 16, -18, 5).join()\nclient.moveToPositionAsync(21, 44, -20, 5).join()\nclient.moveToPositionAsync(-27, -12, -9, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-35, -36, -8, 5).join()\nclient.moveToPositionAsync(8, -1, -13, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问7个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-2, -2, -6, 5).join()\nclient.moveToPositionAsync(-2, -27, -14, 5).join()\nclient.moveToPositionAsync(-8, -37, -15, 5).join()\nclient.moveToPositionAsync(31, -29, -18, 5).join()\nclient.moveToPositionAsync(5, 49, -20, 5).join()\nclient.moveToPositionAsync(-44, 36, -17, 5).join()\nclient.moveToPositionAsync(-50, 9, -13, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问4个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-17, 26, -14, 5).join()\nclient.moveToPositionAsync(-7, -33, -8, 5).join()\nclient.moveToPositionAsync(25, -28, -13, 5).join()\nclient.moveToPositionAsync(-12, -17, -8, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-3, 32, -18, 5).join()\nclient.moveToPositionAsync(-33, 1, -20, 5).join()\nclient.moveToPositionAsync(-47, -15, -13, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问10个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(1, -25, -13, 5).join()\nclient.moveToPositionAsync(2, -34, -7, 5).join()\nclient.moveToPositionAsync(-13, -43, -11, 5).join()\nclient.moveToPositionAsync(-19, -44, -12, 5).join()\nclient.moveToPositionAsync(-21, -49, -15, 5).join()\nclient.moveToPositionAsync(-25, -30, -19, 5).join()\nclient.moveToPositionAsync(-15, -29, -11, 5).join()\nclient.moveToPositionAsync(38, -43, -5, 5).join()\nclient.moveToPositionAsync(42, -6, -5, 5).join()\nclient.moveToPositionAsync(-9, 46, -8, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问5个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(13, -48, -8, 5).join()\nclient.moveToPositionAsync(36, -41, -16, 5).join()\nclient.moveToPositionAsync(42, -9, -8, 5).join()\nclient.moveToPositionAsync(12, -49, -7, 5).join()\nclient.moveToPositionAsync(-15, -22, -6, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-2, -10, -9, 5).join()\nclient.moveToPositionAsync(10, -38, -17, 5).join()\nclient.moveToPositionAsync(2, 0, -7, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问6个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-37, -30, -13, 5).join()\nclient.moveToPositionAsync(-41, 28, -11, 5).join()\nclient.moveToPositionAsync(-46, -45, -7, 5).join()\nclient.moveToPositionAsync(-39, 5, -20, 5).join()\nclient.moveToPositionAsync(49, -34, -10, 5).join()\nclient.moveToPositionAsync(-34, -13, -17, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问6个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-35, -29, -19, 5).join()\nclient.moveToPositionAsync(43, 17, -11, 5).join()\nclient.moveToPositionAsync(-11, -31, -15, 5).join()\nclient.moveToPositionAsync(19, -42, -17, 5).join()\nclient.moveToPositionAsync(-43, 46, -17, 5).join()\nclient.moveToPositionAsync(8, 47, -16, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问5个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(37, -43, -5, 5).join()\nclient.moveToPositionAsync(30, -6, -7, 5).join()\nclient.moveToPositionAsync(13, -28, -12, 5).join()\nclient.moveToPositionAsync(43, -29, -18, 5).join()\nclient.moveToPositionAsync(-3, 27, -5, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(27, 37, -12, 5).join()\nclient.moveToPositionAsync(-38, 33, -19, 5).join()\nclient.moveToPositionAsync(-18, 34, -16, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(13, 12, -11, 5).join()\nclient.moveToPositionAsync(46, -23, -17, 5).join()\nclient.moveToPositionAsync(-39, 23, -5, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-46, 49, -6, 5).join()\nclient.moveToPositionAsync(19, -12, -5, 5).join()\nclient.moveToPositionAsync(-32, -39, -16, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-45, 44, -10, 5).join()\nclient.moveToPositionAsync(-42, -1, -13, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问5个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(43, 27, -13, 5).join()\nclient.moveToPositionAsync(43, -4, -13, 5).join()\nclient.moveToPositionAsync(34, -28, -7, 5).join()\nclient.moveToPositionAsync(-29, 36, -20, 5).join()\nclient.moveToPositionAsync(-14, -4, -15, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-3, 28, -9, 5).join()\nclient.moveToPositionAsync(-4, -43, -12, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问8个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(3, -17, -14, 5).join()\nclient.moveToPositionAsync(6, -29, -9, 5).join()\nclient.moveToPositionAsync(31, -43, -6, 5).join()\nclient.moveToPositionAsync(29, 13, -18, 5).join()\nclient.moveToPositionAsync(29, 16, -8, 5).join()\nclient.moveToPositionAsync(40, 22, -11, 5).join()\nclient.moveToPositionAsync(-9, 49, -20, 5).join()\nclient.moveToPositionAsync(-38, 5, -5, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-50, -20, -17, 5).join()\nclient.moveToPositionAsync(-22, 2, -14, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问10个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-7, 7, -11, 5).join()\nclient.moveToPositionAsync(-39, 10, -12, 5).join()\nclient.moveToPositionAsync(-41, 25, -20, 5).join()\nclient.moveToPositionAsync(-25, 39, -14, 5).join()\nclient.moveToPositionAsync(-16, 42, -5, 5).join()\nclient.moveToPositionAsync(4, 46, -12, 5).join()\nclient.moveToPositionAsync(26, 44, -6, 5).join()\nclient.moveToPositionAsync(38, 42, -8, 5).join()\nclient.moveToPositionAsync(5, -45, -20, 5).join()\nclient.moveToPositionAsync(-23, -31, -7, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-35, 31, -8, 5).join()\nclient.moveToPositionAsync(36, -36, -8, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-41, 17, -16, 5).join()\nclient.moveToPositionAsync(21, 4, -8, 5).join()\nclient.moveToPositionAsync(-26, 6, -10, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-45, -32, -15, 5).join()\nclient.moveToPositionAsync(-14, 13, -5, 5).join()\nclient.moveToPositionAsync(17, 14, -5, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-15, -46, -12, 5).join()\nclient.moveToPositionAsync(-6, 8, -17, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问9个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-23, 4, -9, 5).join()\nclient.moveToPositionAsync(-36, -1, -20, 5).join()\nclient.moveToPositionAsync(-13, -21, -10, 5).join()\nclient.moveToPositionAsync(0, 30, -10, 5).join()\nclient.moveToPositionAsync(-1, 48, -18, 5).join()\nclient.moveToPositionAsync(-38, 41, -7, 5).join()\nclient.moveToPositionAsync(49, -7, -11, 5).join()\nclient.moveToPositionAsync(48, -15, -13, 5).join()\nclient.moveToPositionAsync(44, -30, -6, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问7个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(2, 16, -15, 5).join()\nclient.moveToPositionAsync(-20, -10, -18, 5).join()\nclient.moveToPositionAsync(-41, -8, -8, 5).join()\nclient.moveToPositionAsync(-45, 4, -12, 5).join()\nclient.moveToPositionAsync(-27, 45, -18, 5).join()\nclient.moveToPositionAsync(49, 6, -10, 5).join()\nclient.moveToPositionAsync(28, -26, -14, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问9个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(1, 3, -7, 5).join()\nclient.moveToPositionAsync(22, 3, -19, 5).join()\nclient.moveToPositionAsync(24, -1, -13, 5).join()\nclient.moveToPositionAsync(48, -22, -12, 5).join()\nclient.moveToPositionAsync(5, -41, -20, 5).join()\nclient.moveToPositionAsync(-30, 3, -17, 5).join()\nclient.moveToPositionAsync(-22, 19, -18, 5).join()\nclient.moveToPositionAsync(-13, 31, -10, 5).join()\nclient.moveToPositionAsync(-43, 17, -18, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问5个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-46, 7, -10, 5).join()\nclient.moveToPositionAsync(35, 3, -11, 5).join()\nclient.moveToPositionAsync(2, 31, -9, 5).join()\nclient.moveToPositionAsync(-49, -42, -17, 5).join()\nclient.moveToPositionAsync(40, 2, -20, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问6个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(48, -27, -7, 5).join()\nclient.moveToPositionAsync(-32, 14, -20, 5).join()\nclient.moveToPositionAsync(-30, 8, -11, 5).join()\nclient.moveToPositionAsync(9, -16, -16, 5).join()\nclient.moveToPositionAsync(2, 11, -5, 5).join()\nclient.moveToPositionAsync(-35, -35, -16, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问5个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(16, 35, -13, 5).join()\nclient.moveToPositionAsync(23, 47, -14, 5).join()\nclient.moveToPositionAsync(-44, 29, -14, 5).join()\nclient.moveToPositionAsync(-16, -19, -17, 5).join()\nclient.moveToPositionAsync(-6, -30, -14, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-23, 39, -6, 5).join()\nclient.moveToPositionAsync(-50, -33, -8, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-39, 0, -20, 5).join()\nclient.moveToPositionAsync(-2, 42, -7, 5).join()\nclient.moveToPositionAsync(-29, -5, -13, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-45, 47, -16, 5).join()\nclient.moveToPositionAsync(-4, 8, -9, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-40, -42, -18, 5).join()\nclient.moveToPositionAsync(-8, -40, -17, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(4, -43, -14, 5).join()\nclient.moveToPositionAsync(-13, -8, -9, 5).join()\nclient.moveToPositionAsync(-12, -32, -19, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-9, 3, -11, 5).join()\nclient.moveToPositionAsync(38, 30, -17, 5).join()\nclient.moveToPositionAsync(-7, -21, -14, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-30, 1, -18, 5).join()\nclient.moveToPositionAsync(4, 16, -7, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问6个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(23, -5, -11, 5).join()\nclient.moveToPositionAsync(-24, 8, -20, 5).join()\nclient.moveToPositionAsync(41, 46, -12, 5).join()\nclient.moveToPositionAsync(21, 26, -6, 5).join()\nclient.moveToPositionAsync(43, -9, -13, 5).join()\nclient.moveToPositionAsync(19, -49, -11, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问4个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-22, 43, -11, 5).join()\nclient.moveToPositionAsync(40, -7, -7, 5).join()\nclient.moveToPositionAsync(-1, 15, -20, 5).join()\nclient.moveToPositionAsync(49, -50, -20, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往3个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-34, -30, -11, 5).join()\nclient.moveToPositionAsync(40, -12, -13, 5).join()\nclient.moveToPositionAsync(-9, 7, -20, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问6个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(48, -16, -13, 5).join()\nclient.moveToPositionAsync(-50, -6, -14, 5).join()\nclient.moveToPositionAsync(-29, 33, -12, 5).join()\nclient.moveToPositionAsync(-5, -8, -12, 5).join()\nclient.moveToPositionAsync(3, -1, -6, 5).join()\nclient.moveToPositionAsync(-41, -31, -16, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Medium", "description": "无人机Path Planning任务：按照预定顺序访问4个路径点，中途可悬停观察，最终降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(24, -12, -19, 5).join()\nclient.moveToPositionAsync(47, 35, -7, 5).join()\nclient.moveToPositionAsync(28, 2, -13, 5).join()\nclient.moveToPositionAsync(-36, 16, -11, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问8个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(18, -17, -15, 5).join()\nclient.moveToPositionAsync(-2, -32, -9, 5).join()\nclient.moveToPositionAsync(26, -44, -12, 5).join()\nclient.moveToPositionAsync(-33, -10, -7, 5).join()\nclient.moveToPositionAsync(-37, -17, -14, 5).join()\nclient.moveToPositionAsync(-25, 33, -9, 5).join()\nclient.moveToPositionAsync(-34, 45, -8, 5).join()\nclient.moveToPositionAsync(12, 45, -5, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问7个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-14, -2, -19, 5).join()\nclient.moveToPositionAsync(-31, 1, -19, 5).join()\nclient.moveToPositionAsync(-49, -37, -6, 5).join()\nclient.moveToPositionAsync(9, -44, -6, 5).join()\nclient.moveToPositionAsync(38, -44, -12, 5).join()\nclient.moveToPositionAsync(43, -35, -7, 5).join()\nclient.moveToPositionAsync(45, -23, -6, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-5, -31, -15, 5).join()\nclient.moveToPositionAsync(15, 9, -20, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Complex", "description": "无人机复杂Path Planning任务：计算优化路径访问7个目标点，依次飞行后降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(0, -7, -20, 5).join()\nclient.moveToPositionAsync(20, -2, -11, 5).join()\nclient.moveToPositionAsync(31, -27, -18, 5).join()\nclient.moveToPositionAsync(-8, -47, -10, 5).join()\nclient.moveToPositionAsync(-29, 8, -8, 5).join()\nclient.moveToPositionAsync(-28, 23, -10, 5).join()\nclient.moveToPositionAsync(-33, 35, -20, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-37, -29, -5, 5).join()\nclient.moveToPositionAsync(-39, 37, -11, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Path Planning", "difficulty": "Simple", "description": "无人机简单Path Planning任务：依次飞往2个目标点，然后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\nclient.moveToPositionAsync(-19, 5, -10, 5).join()\nclient.moveToPositionAsync(-28, -14, -6, 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (57, -3, -10)  # 目标点坐标\nobstacle = (16, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (59, -1, -10)  # 目标点坐标\nobstacle = (13, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(29.5, -0.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 29.5)**2 + (obstacle[1] - -0.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (39, -4, -10)  # 目标点坐标\nobstacle = (16, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(19.5, -2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 19.5)**2 + (obstacle[1] - -2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (44, 3, -10)  # 目标点坐标\nobstacle = (13, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (45, 5, -10)  # 目标点坐标\nobstacle = (11, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (34, 4, -10)  # 目标点坐标\nobstacle = (15, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(17.0, 2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 17.0)**2 + (obstacle[1] - 2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (51, 10, -10)  # 目标点坐标\nobstacle = (17, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (60, 1, -10)  # 目标点坐标\nobstacle = (16, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(30.0, 0.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 30.0)**2 + (obstacle[1] - 0.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (60, -6, -10)  # 目标点坐标\nobstacle = (20, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(30.0, -3.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 30.0)**2 + (obstacle[1] - -3.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (57, -1, -10)  # 目标点坐标\nobstacle = (20, -2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(28.5, -0.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 28.5)**2 + (obstacle[1] - -0.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (38, 8, -10)  # 目标点坐标\nobstacle = (20, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(19.0, 4.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 19.0)**2 + (obstacle[1] - 4.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (36, 6, -10)  # 目标点坐标\nobstacle = (20, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (38, -7, -10)  # 目标点坐标\nobstacle = (18, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(19.0, -3.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 19.0)**2 + (obstacle[1] - -3.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (59, 0, -10)  # 目标点坐标\nobstacle = (10, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(29.5, 0.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 29.5)**2 + (obstacle[1] - 0.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (36, -1, -10)  # 目标点坐标\nobstacle = (16, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (50, -4, -10)  # 目标点坐标\nobstacle = (17, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (31, -5, -10)  # 目标点坐标\nobstacle = (20, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (40, 10, -10)  # 目标点坐标\nobstacle = (11, 0)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(20.0, 5.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 20.0)**2 + (obstacle[1] - 5.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (57, -10, -10)  # 目标点坐标\nobstacle = (19, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (60, 6, -10)  # 目标点坐标\nobstacle = (20, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (49, -1, -10)  # 目标点坐标\nobstacle = (12, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(24.5, -0.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 24.5)**2 + (obstacle[1] - -0.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (39, -6, -10)  # 目标点坐标\nobstacle = (11, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (36, -7, -10)  # 目标点坐标\nobstacle = (12, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (46, -2, -10)  # 目标点坐标\nobstacle = (16, -2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(23.0, -1.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 23.0)**2 + (obstacle[1] - -1.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (30, -5, -10)  # 目标点坐标\nobstacle = (15, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(15.0, -2.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 15.0)**2 + (obstacle[1] - -2.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (36, 7, -10)  # 目标点坐标\nobstacle = (15, -2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(18.0, 3.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 18.0)**2 + (obstacle[1] - 3.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (42, -2, -10)  # 目标点坐标\nobstacle = (14, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (43, -2, -10)  # 目标点坐标\nobstacle = (13, -3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (42, -3, -10)  # 目标点坐标\nobstacle = (17, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (45, -3, -10)  # 目标点坐标\nobstacle = (16, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (47, -6, -10)  # 目标点坐标\nobstacle = (16, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(23.5, -3.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 23.5)**2 + (obstacle[1] - -3.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (49, 0, -10)  # 目标点坐标\nobstacle = (20, 0)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(24.5, 0.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 24.5)**2 + (obstacle[1] - 0.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (38, -4, -10)  # 目标点坐标\nobstacle = (20, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(19.0, -2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 19.0)**2 + (obstacle[1] - -2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (39, -10, -10)  # 目标点坐标\nobstacle = (11, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(19.5, -5.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 19.5)**2 + (obstacle[1] - -5.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (59, 0, -10)  # 目标点坐标\nobstacle = (16, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(29.5, 0.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 29.5)**2 + (obstacle[1] - 0.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (40, -7, -10)  # 目标点坐标\nobstacle = (12, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(20.0, -3.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 20.0)**2 + (obstacle[1] - -3.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (45, -9, -10)  # 目标点坐标\nobstacle = (11, 0)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (58, -6, -10)  # 目标点坐标\nobstacle = (18, 1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(29.0, -3.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 29.0)**2 + (obstacle[1] - -3.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (33, 4, -10)  # 目标点坐标\nobstacle = (13, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(16.5, 2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 16.5)**2 + (obstacle[1] - 2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (51, 6, -10)  # 目标点坐标\nobstacle = (14, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (57, -6, -10)  # 目标点坐标\nobstacle = (16, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (32, 6, -10)  # 目标点坐标\nobstacle = (14, -3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (46, -4, -10)  # 目标点坐标\nobstacle = (15, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (43, 3, -10)  # 目标点坐标\nobstacle = (15, -2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (46, -3, -10)  # 目标点坐标\nobstacle = (18, 0)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (43, 0, -10)  # 目标点坐标\nobstacle = (17, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(21.5, 0.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 21.5)**2 + (obstacle[1] - 0.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (39, 8, -10)  # 目标点坐标\nobstacle = (11, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (48, -9, -10)  # 目标点坐标\nobstacle = (17, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(24.0, -4.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 24.0)**2 + (obstacle[1] - -4.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (33, -6, -10)  # 目标点坐标\nobstacle = (12, -3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(16.5, -3.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 16.5)**2 + (obstacle[1] - -3.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (35, -2, -10)  # 目标点坐标\nobstacle = (14, 1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(17.5, -1.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 17.5)**2 + (obstacle[1] - -1.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (54, 6, -10)  # 目标点坐标\nobstacle = (14, -2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(27.0, 3.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 27.0)**2 + (obstacle[1] - 3.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (45, -5, -10)  # 目标点坐标\nobstacle = (11, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(22.5, -2.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 22.5)**2 + (obstacle[1] - -2.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (35, 6, -10)  # 目标点坐标\nobstacle = (18, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (44, -1, -10)  # 目标点坐标\nobstacle = (18, 0)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (32, -9, -10)  # 目标点坐标\nobstacle = (11, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (53, 7, -10)  # 目标点坐标\nobstacle = (20, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (47, 0, -10)  # 目标点坐标\nobstacle = (11, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (49, -9, -10)  # 目标点坐标\nobstacle = (16, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(24.5, -4.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 24.5)**2 + (obstacle[1] - -4.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (58, 10, -10)  # 目标点坐标\nobstacle = (19, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(29.0, 5.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 29.0)**2 + (obstacle[1] - 5.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (31, 4, -10)  # 目标点坐标\nobstacle = (18, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(15.5, 2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 15.5)**2 + (obstacle[1] - 2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (51, -4, -10)  # 目标点坐标\nobstacle = (16, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(25.5, -2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 25.5)**2 + (obstacle[1] - -2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (60, -2, -10)  # 目标点坐标\nobstacle = (19, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(30.0, -1.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 30.0)**2 + (obstacle[1] - -1.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (40, 7, -10)  # 目标点坐标\nobstacle = (19, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (41, -6, -10)  # 目标点坐标\nobstacle = (19, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(20.5, -3.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 20.5)**2 + (obstacle[1] - -3.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (49, 8, -10)  # 目标点坐标\nobstacle = (17, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (56, -6, -10)  # 目标点坐标\nobstacle = (17, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (42, -1, -10)  # 目标点坐标\nobstacle = (15, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(21.0, -0.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 21.0)**2 + (obstacle[1] - -0.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (38, -5, -10)  # 目标点坐标\nobstacle = (13, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(19.0, -2.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 19.0)**2 + (obstacle[1] - -2.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (52, 4, -10)  # 目标点坐标\nobstacle = (19, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (41, 7, -10)  # 目标点坐标\nobstacle = (18, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(20.5, 3.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 20.5)**2 + (obstacle[1] - 3.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (31, -2, -10)  # 目标点坐标\nobstacle = (12, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (37, -6, -10)  # 目标点坐标\nobstacle = (18, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (33, 7, -10)  # 目标点坐标\nobstacle = (17, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(16.5, 3.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 16.5)**2 + (obstacle[1] - 3.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (44, 4, -10)  # 目标点坐标\nobstacle = (16, -2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(22.0, 2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 22.0)**2 + (obstacle[1] - 2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (37, 9, -10)  # 目标点坐标\nobstacle = (13, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (39, 2, -10)  # 目标点坐标\nobstacle = (14, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (32, -2, -10)  # 目标点坐标\nobstacle = (10, 1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(16.0, -1.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 16.0)**2 + (obstacle[1] - -1.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (33, -8, -10)  # 目标点坐标\nobstacle = (13, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (52, 1, -10)  # 目标点坐标\nobstacle = (10, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(26.0, 0.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 26.0)**2 + (obstacle[1] - 0.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (41, 10, -10)  # 目标点坐标\nobstacle = (11, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (60, -4, -10)  # 目标点坐标\nobstacle = (18, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (49, -9, -10)  # 目标点坐标\nobstacle = (16, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(24.5, -4.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 24.5)**2 + (obstacle[1] - -4.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (39, -6, -10)  # 目标点坐标\nobstacle = (19, 1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(19.5, -3.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 19.5)**2 + (obstacle[1] - -3.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (42, -4, -10)  # 目标点坐标\nobstacle = (18, 1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(21.0, -2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 21.0)**2 + (obstacle[1] - -2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (53, 10, -10)  # 目标点坐标\nobstacle = (18, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (51, 9, -10)  # 目标点坐标\nobstacle = (10, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(25.5, 4.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 25.5)**2 + (obstacle[1] - 4.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (52, -10, -10)  # 目标点坐标\nobstacle = (16, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (55, 3, -10)  # 目标点坐标\nobstacle = (12, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(27.5, 1.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 27.5)**2 + (obstacle[1] - 1.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (51, 7, -10)  # 目标点坐标\nobstacle = (13, 0)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (49, -6, -10)  # 目标点坐标\nobstacle = (12, 1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (36, 9, -10)  # 目标点坐标\nobstacle = (14, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(18.0, 4.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 18.0)**2 + (obstacle[1] - 4.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (37, -1, -10)  # 目标点坐标\nobstacle = (17, 1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (54, -6, -10)  # 目标点坐标\nobstacle = (19, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (36, 7, -10)  # 目标点坐标\nobstacle = (12, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (50, -3, -10)  # 目标点坐标\nobstacle = (16, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(25.0, -1.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 25.0)**2 + (obstacle[1] - -1.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (49, 7, -10)  # 目标点坐标\nobstacle = (16, -3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (51, 5, -10)  # 目标点坐标\nobstacle = (19, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (36, -3, -10)  # 目标点坐标\nobstacle = (14, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(18.0, -1.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 18.0)**2 + (obstacle[1] - -1.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (54, 1, -10)  # 目标点坐标\nobstacle = (13, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(27.0, 0.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 27.0)**2 + (obstacle[1] - 0.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (55, 10, -10)  # 目标点坐标\nobstacle = (10, 0)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Medium", "description": "无人机Target Search任务：在指定区域内逐行扫描目标，一旦发现立即悬停定位。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 50, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 50, 10)\n    else:\n        x_range = range(50, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Simple", "description": "无人机Target Search任务：在小范围区域执行Z字形搜索，如发现目标则悬停等待。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 20, 10):\n    y = j\n    if j // 10 % 2 == 0:\n        x_range = range(0, 20, 10)\n    else:\n        x_range = range(20, -1, -10)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Target Search", "difficulty": "Complex", "description": "无人机Target Search任务：在广阔区域执行Z字形航线搜索，覆盖整个区域后定位目标。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\n# 执行Z字形搜索覆盖指定区域\ntarget_found = False\nfor j in range(0, 100, 20):\n    y = j\n    if j // 20 % 2 == 0:\n        x_range = range(0, 100, 20)\n    else:\n        x_range = range(100, -1, -20)\n    for x in x_range:\n        client.moveToPositionAsync(x, y, -10, 5).join()\n        # 检查是否发现目标（这里可调用图像识别模型）\n        if target_found:\n            break\n    if target_found:\n        break\nif target_found:\n    client.hoverAsync().join()  # 发现目标后悬停定位\nelse:\n    client.landAsync().join()   # 未找到目标则执行降落\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
