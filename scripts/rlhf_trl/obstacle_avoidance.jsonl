{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (57, -3, -10)  # 目标点坐标\nobstacle = (16, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (59, -1, -10)  # 目标点坐标\nobstacle = (13, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(29.5, -0.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 29.5)**2 + (obstacle[1] - -0.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (39, -4, -10)  # 目标点坐标\nobstacle = (16, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(19.5, -2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 19.5)**2 + (obstacle[1] - -2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (44, 3, -10)  # 目标点坐标\nobstacle = (13, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (45, 5, -10)  # 目标点坐标\nobstacle = (11, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (34, 4, -10)  # 目标点坐标\nobstacle = (15, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(17.0, 2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 17.0)**2 + (obstacle[1] - 2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (51, 10, -10)  # 目标点坐标\nobstacle = (17, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (60, 1, -10)  # 目标点坐标\nobstacle = (16, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(30.0, 0.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 30.0)**2 + (obstacle[1] - 0.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (60, -6, -10)  # 目标点坐标\nobstacle = (20, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(30.0, -3.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 30.0)**2 + (obstacle[1] - -3.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (57, -1, -10)  # 目标点坐标\nobstacle = (20, -2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(28.5, -0.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 28.5)**2 + (obstacle[1] - -0.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (38, 8, -10)  # 目标点坐标\nobstacle = (20, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(19.0, 4.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 19.0)**2 + (obstacle[1] - 4.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (36, 6, -10)  # 目标点坐标\nobstacle = (20, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (38, -7, -10)  # 目标点坐标\nobstacle = (18, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(19.0, -3.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 19.0)**2 + (obstacle[1] - -3.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (59, 0, -10)  # 目标点坐标\nobstacle = (10, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(29.5, 0.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 29.5)**2 + (obstacle[1] - 0.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (36, -1, -10)  # 目标点坐标\nobstacle = (16, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (50, -4, -10)  # 目标点坐标\nobstacle = (17, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (31, -5, -10)  # 目标点坐标\nobstacle = (20, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (40, 10, -10)  # 目标点坐标\nobstacle = (11, 0)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(20.0, 5.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 20.0)**2 + (obstacle[1] - 5.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (57, -10, -10)  # 目标点坐标\nobstacle = (19, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (60, 6, -10)  # 目标点坐标\nobstacle = (20, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (49, -1, -10)  # 目标点坐标\nobstacle = (12, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(24.5, -0.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 24.5)**2 + (obstacle[1] - -0.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (39, -6, -10)  # 目标点坐标\nobstacle = (11, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (36, -7, -10)  # 目标点坐标\nobstacle = (12, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (46, -2, -10)  # 目标点坐标\nobstacle = (16, -2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(23.0, -1.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 23.0)**2 + (obstacle[1] - -1.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (30, -5, -10)  # 目标点坐标\nobstacle = (15, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(15.0, -2.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 15.0)**2 + (obstacle[1] - -2.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (36, 7, -10)  # 目标点坐标\nobstacle = (15, -2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(18.0, 3.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 18.0)**2 + (obstacle[1] - 3.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (42, -2, -10)  # 目标点坐标\nobstacle = (14, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (43, -2, -10)  # 目标点坐标\nobstacle = (13, -3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (42, -3, -10)  # 目标点坐标\nobstacle = (17, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (45, -3, -10)  # 目标点坐标\nobstacle = (16, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (47, -6, -10)  # 目标点坐标\nobstacle = (16, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(23.5, -3.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 23.5)**2 + (obstacle[1] - -3.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (49, 0, -10)  # 目标点坐标\nobstacle = (20, 0)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(24.5, 0.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 24.5)**2 + (obstacle[1] - 0.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (38, -4, -10)  # 目标点坐标\nobstacle = (20, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(19.0, -2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 19.0)**2 + (obstacle[1] - -2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (39, -10, -10)  # 目标点坐标\nobstacle = (11, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(19.5, -5.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 19.5)**2 + (obstacle[1] - -5.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (59, 0, -10)  # 目标点坐标\nobstacle = (16, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(29.5, 0.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 29.5)**2 + (obstacle[1] - 0.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (40, -7, -10)  # 目标点坐标\nobstacle = (12, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(20.0, -3.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 20.0)**2 + (obstacle[1] - -3.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (45, -9, -10)  # 目标点坐标\nobstacle = (11, 0)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (58, -6, -10)  # 目标点坐标\nobstacle = (18, 1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(29.0, -3.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 29.0)**2 + (obstacle[1] - -3.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (33, 4, -10)  # 目标点坐标\nobstacle = (13, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(16.5, 2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 16.5)**2 + (obstacle[1] - 2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (51, 6, -10)  # 目标点坐标\nobstacle = (14, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (57, -6, -10)  # 目标点坐标\nobstacle = (16, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (32, 6, -10)  # 目标点坐标\nobstacle = (14, -3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (46, -4, -10)  # 目标点坐标\nobstacle = (15, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (43, 3, -10)  # 目标点坐标\nobstacle = (15, -2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (46, -3, -10)  # 目标点坐标\nobstacle = (18, 0)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (43, 0, -10)  # 目标点坐标\nobstacle = (17, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(21.5, 0.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 21.5)**2 + (obstacle[1] - 0.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (39, 8, -10)  # 目标点坐标\nobstacle = (11, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (48, -9, -10)  # 目标点坐标\nobstacle = (17, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(24.0, -4.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 24.0)**2 + (obstacle[1] - -4.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (33, -6, -10)  # 目标点坐标\nobstacle = (12, -3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(16.5, -3.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 16.5)**2 + (obstacle[1] - -3.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (35, -2, -10)  # 目标点坐标\nobstacle = (14, 1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(17.5, -1.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 17.5)**2 + (obstacle[1] - -1.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (54, 6, -10)  # 目标点坐标\nobstacle = (14, -2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(27.0, 3.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 27.0)**2 + (obstacle[1] - 3.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (45, -5, -10)  # 目标点坐标\nobstacle = (11, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(22.5, -2.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 22.5)**2 + (obstacle[1] - -2.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (35, 6, -10)  # 目标点坐标\nobstacle = (18, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (44, -1, -10)  # 目标点坐标\nobstacle = (18, 0)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (32, -9, -10)  # 目标点坐标\nobstacle = (11, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (53, 7, -10)  # 目标点坐标\nobstacle = (20, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (47, 0, -10)  # 目标点坐标\nobstacle = (11, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (49, -9, -10)  # 目标点坐标\nobstacle = (16, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(24.5, -4.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 24.5)**2 + (obstacle[1] - -4.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (58, 10, -10)  # 目标点坐标\nobstacle = (19, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(29.0, 5.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 29.0)**2 + (obstacle[1] - 5.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (31, 4, -10)  # 目标点坐标\nobstacle = (18, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(15.5, 2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 15.5)**2 + (obstacle[1] - 2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (51, -4, -10)  # 目标点坐标\nobstacle = (16, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(25.5, -2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 25.5)**2 + (obstacle[1] - -2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (60, -2, -10)  # 目标点坐标\nobstacle = (19, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(30.0, -1.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 30.0)**2 + (obstacle[1] - -1.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (40, 7, -10)  # 目标点坐标\nobstacle = (19, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (41, -6, -10)  # 目标点坐标\nobstacle = (19, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(20.5, -3.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 20.5)**2 + (obstacle[1] - -3.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (49, 8, -10)  # 目标点坐标\nobstacle = (17, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (56, -6, -10)  # 目标点坐标\nobstacle = (17, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (42, -1, -10)  # 目标点坐标\nobstacle = (15, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(21.0, -0.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 21.0)**2 + (obstacle[1] - -0.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (38, -5, -10)  # 目标点坐标\nobstacle = (13, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(19.0, -2.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 19.0)**2 + (obstacle[1] - -2.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (52, 4, -10)  # 目标点坐标\nobstacle = (19, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (41, 7, -10)  # 目标点坐标\nobstacle = (18, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(20.5, 3.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 20.5)**2 + (obstacle[1] - 3.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (31, -2, -10)  # 目标点坐标\nobstacle = (12, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (37, -6, -10)  # 目标点坐标\nobstacle = (18, -5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (33, 7, -10)  # 目标点坐标\nobstacle = (17, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(16.5, 3.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 16.5)**2 + (obstacle[1] - 3.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (44, 4, -10)  # 目标点坐标\nobstacle = (16, -2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(22.0, 2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 22.0)**2 + (obstacle[1] - 2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (37, 9, -10)  # 目标点坐标\nobstacle = (13, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (39, 2, -10)  # 目标点坐标\nobstacle = (14, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (32, -2, -10)  # 目标点坐标\nobstacle = (10, 1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(16.0, -1.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 16.0)**2 + (obstacle[1] - -1.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (33, -8, -10)  # 目标点坐标\nobstacle = (13, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (52, 1, -10)  # 目标点坐标\nobstacle = (10, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(26.0, 0.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 26.0)**2 + (obstacle[1] - 0.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (41, 10, -10)  # 目标点坐标\nobstacle = (11, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (60, -4, -10)  # 目标点坐标\nobstacle = (18, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (49, -9, -10)  # 目标点坐标\nobstacle = (16, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(24.5, -4.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 24.5)**2 + (obstacle[1] - -4.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (39, -6, -10)  # 目标点坐标\nobstacle = (19, 1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(19.5, -3.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 19.5)**2 + (obstacle[1] - -3.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (42, -4, -10)  # 目标点坐标\nobstacle = (18, 1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(21.0, -2.0, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 21.0)**2 + (obstacle[1] - -2.0)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (53, 10, -10)  # 目标点坐标\nobstacle = (18, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (51, 9, -10)  # 目标点坐标\nobstacle = (10, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(25.5, 4.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 25.5)**2 + (obstacle[1] - 4.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (52, -10, -10)  # 目标点坐标\nobstacle = (16, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (55, 3, -10)  # 目标点坐标\nobstacle = (12, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(27.5, 1.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 27.5)**2 + (obstacle[1] - 1.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (51, 7, -10)  # 目标点坐标\nobstacle = (13, 0)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (49, -6, -10)  # 目标点坐标\nobstacle = (12, 1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (36, 9, -10)  # 目标点坐标\nobstacle = (14, 2)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(18.0, 4.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 18.0)**2 + (obstacle[1] - 4.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Complex", "description": "无人机Obstacle Avoidance任务：实时扫描前方障碍并动态调整路径绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (37, -1, -10)  # 目标点坐标\nobstacle = (17, 1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nimport math\ncurr_x, curr_y = 0, 0\npath = []  # 将规划的路径点存储在列表\nwhile math.hypot(target[0]-curr_x, target[1]-curr_y) > 5:\n    # 朝目标前进小步长\n    step_x = curr_x + 5 if target[0] > curr_x else curr_x - 5\n    step_y = curr_y + 5 if target[1] > curr_y else curr_y - 5\n    # 检测障碍物距离\n    dist = math.hypot(obstacle[0] - step_x, obstacle[1] - step_y)\n    if dist < 5:\n        # 障碍物过近，修改路径：改变方向绕行\n        step_y += 20  # 把路径偏移20单位绕过障碍\n    path.append((step_x, step_y, target[2] if dist >= 5 else avoid_alt))\n    curr_x, curr_y = step_x, step_y\n# 按规划路径飞行\nfor px, py, pz in path:\n    client.moveToPositionAsync(px, py, pz, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (54, -6, -10)  # 目标点坐标\nobstacle = (19, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (36, 7, -10)  # 目标点坐标\nobstacle = (12, 5)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (50, -3, -10)  # 目标点坐标\nobstacle = (16, 4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(25.0, -1.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 25.0)**2 + (obstacle[1] - -1.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (49, 7, -10)  # 目标点坐标\nobstacle = (16, -3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (51, 5, -10)  # 目标点坐标\nobstacle = (19, 3)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (36, -3, -10)  # 目标点坐标\nobstacle = (14, -1)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(18.0, -1.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 18.0)**2 + (obstacle[1] - -1.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Simple", "description": "无人机Obstacle Avoidance任务：飞行途中检测到障碍则临时改变高度绕过，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (54, 1, -10)  # 目标点坐标\nobstacle = (13, -4)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nclient.moveToPositionAsync(27.0, 0.5, -10, 5).join()\n# 检测与障碍的距离\ndist = ((obstacle[0] - 27.0)**2 + (obstacle[1] - 0.5)**2)**0.5\nif dist < 5:\n    # 障碍过近，调整航线绕过障碍\n    client.moveToPositionAsync(obstacle[0], obstacle[1] + 10, avoid_alt, 5).join()\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
{"task_type": "Obstacle Avoidance", "difficulty": "Medium", "description": "无人机Obstacle Avoidance任务：逐步前进并多次检测障碍，遇障碍时绕行，最后安全降落。", "code": "import airsim\nclient = airsim.MultirotorClient()\nclient.confirmConnection()\nclient.enableApiControl(True)\nclient.armDisarm(True)\nclient.takeoffAsync().join()\ntarget = (55, 10, -10)  # 目标点坐标\nobstacle = (10, 0)       # 障碍物所在平面位置\navoid_alt = -15  # 绕障时的飞行高度（15米）\nfor i in range(5):\n    # 将路径分为5段逐步飞行\n    frac = (i + 1) / 5.0\n    cur_x = target[0] * frac\n    cur_y = target[1] * frac\n    client.moveToPositionAsync(cur_x, cur_y, target[2], 4).join()\n    dist = ((obstacle[0] - cur_x)**2 + (obstacle[1] - cur_y)**2)**0.5\n    if dist < 5:\n        # 障碍物接近，执行绕行：先上升再绕过\n        client.moveToPositionAsync(cur_x, cur_y + 15, avoid_alt, 4).join()\n        client.moveToPositionAsync(cur_x + 15, cur_y + 15, target[2], 4).join()\n        break\nclient.moveToPositionAsync(target[0], target[1], target[2], 5).join()\nclient.hoverAsync().join()\ntime.sleep(2)\nclient.landAsync().join()\nclient.armDisarm(False)\nclient.enableApiControl(False)"}
